//User function Template for Java

class Solution{
    
   
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int A[], int N, int K) {
        //Complete the function
        //int n = a.length; // size of the array.
        
        // COMPLEXITY 0(N3)

        // int len = 0;
        // for (int i = 0; i < N; i++) { // starting index
        //     for (int j = i; j < N; j++) { // ending index
        //         // add all the elements of
        //         // subarray = a[i...j]:
        //         long s = 0;
        //         for (int m = i; m <= j; m++) {
        //             s += A[m];
        //         }

        //         if (s == K)
        //             len = Math.max(len, j - i + 1);
        //     }
        // }
        // return len;
        
         // COMPLEXITY 0(N2)

        // int len = 0;
        // for (int i = 0; i < N; i++) { 
        //     long s = 0;// starting index
        //     for (int j = i; j < N; j++) { // ending index
        //         // add all the elements of
        //         // subarray = a[i...j]:
                
                
        //             s += A[j];
                
                 
        //         if (s == K)
        //             len = Math.max(len, j - i + 1);
        //     }
        // }
       
        // return len;
        
        
        //Using HASHMAP
        
        int sum=0;
        int Mlen=0;
        Map<Integer,Integer> leng= new HashMap<>();
        for(int i=0 ; i<N; i++){
            sum += A[i];
            if(sum == K) Mlen= Math.max(Mlen,i+1);
            if(leng.containsKey(sum-K)){
                Mlen=Math.max(Mlen,i-leng.get(sum-K));
            }
                if(!leng.containsKey(sum)){
                    leng.put(sum,i);

            }
        }
      return Mlen;
    }
    
    
}


